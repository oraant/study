; ==================================
;  celery worker supervisor example
; ==================================

[program:dc]
; Set full path to celery program if using virtualenv
command=celery worker -A django_celery --autoscale=10,0 -Ofair --loglevel=INFO --logfile=/tmp/dc/django_celery_process%%i.log 
directory=%(here)s
user=oraant
numprocs=1
stdout_logfile=%(here)s/log/worker.log
stderr_logfile=%(here)s/log/worker.log
autostart=true
autorestart=true
startsecs=11

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600

; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true

; Set Celery priority higher than default (999)
; so, if rabbitmq is supervised, it will start first.
priority=1000

; 结论：
; 设置concurrent为10，multiplier为1时：
; 
;     依次打开、关闭9个，没有问题
;     关闭后重新打开、关闭，没有问题
;     同时打开9个，没有问题
;     同时关闭9个，有三个/四个没有接收到信号，再次关闭时就成功关闭了。猜测是之前的信号量没有被处理完，后面的被丢弃了。
;     间隔0.1秒批量打开、关闭9个，没有任何问题
; 
; 设置autoscale为10,0，multiplier为1时：
; 
;     依次打开、关闭9个，还是有prefetch行为，第一个打开，第二个就pending了
; 
; 设置autoscale为10,0，选项为-Ofair时：
; 
;     依次打开、关闭9个，没有问题
;     关闭后重新打开、关闭，没有问题
;     间隔0.1秒批量打开、关闭9个，没有问题
;     注意：每次关闭task后，自动缩小进程数时，会发送terminate信号，需要处理
